;;; SHOP domain representation for the storing groceries problem.
;;; The robot picks up groceries from a table and stored them in a cupboard with 3 shelfs.
;;; The door of the cupboard is closed at the beginning.
;;; The robot has a tray to carry more than one item at a time.

;; Case 1:
;; - The location of the table and the cupboard are known.
;; - There is one known and located object on the table.
;; - The door of the cupboard is closed.
;; - Place the object on any shelf.

;; Case 2:
;; - The table and the cupboard have to be located.
;; - The are n (2 to 5) known and located objects on the table.
;; - The door of the cupboard is closed.
;; - Place the objects on any shelf.

;; Case 3:
;; - The table and the cupboard have to be located.
;; - There are n unknown objects on the table (perception has to be used)
;; - The door of the cupboard is closed.
;; - Place the objects on any shelf.

;; Case 4:
;; - The table and the cupboard have to be located.
;; - The cupboard has to be explored. Each shelf holds object of a category.
;; - There are n unknown objects on the table (perception has to be used). Each object belongs to a certain category.
;; - The door of the cupboard is closed.
;; - Place each order on the correct shelf according to the category.

;;; ------------------------------------------------------------------------
;;; Declaring the domain: operators, methods, and axioms
;;; ------------------------------------------------------------------------

(defdomain storegroceries
  (
    ;; basic store-groceries operators

    ;; To pickup an object from the table
    (:operator (!pickup ?a)
            ()
            ((clear ?a) (on-table ?a))
            ((holding ?a)))

    ;; To open the cupboard door
    (:operator (!open-door ?d)
            ((door-closed ?d))
            ((door-closed ?d))
            ((door-open ?d)))

    ;; To putdown an object on a shelf
    (:operator (!putdown ?a)
            ()
            ((holding ?a))
            ((on-shelf ?a) (clear ?a)))

    ;; To move the robot ?r from location ?x to location ?y
    (:operator (!move ?r ?x ?y)
            ((robot-at ?r ?x))
            ((robot-at ?r ?x))
            ((robot-at ?r ?y)))

    ;; Add operator to place the object in the tray(so that the robot can carry more than one object at a time)


    ;; The method to move object ?a from the table ?t to the cupboard ?c
    (:method (move-object ?a ?t ?c)
            branch1
            ((robot-at ?r ?t)(on-table ?a)(door-open ?d))
            ((!pickup ?a)(!move ?r ?t ?c)(!putdown ?a))
            branch2
            ((robot-at ?r ?t)(on-table ?a)(door-closed ?d))
            ((!move ?r ?t ?c)(!open-door ?d)(!move ?r ?c ?t)(!pickup ?a)(!move ?r ?t ?c)(!putdown ?a)))

    )
)
