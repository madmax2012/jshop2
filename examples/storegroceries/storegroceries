;;; SHOP domain representation for the storing groceries problem.
;;; The robot picks up groceries from a table and stored them in a cupboard with 3 shelfs.
;;; The door of the cupboard is closed at the beginning.
;;; The robot has a tray to carry more than one item at a time.

;; Case 1:
;; - The location of the table and the cupboard are known.
;; - There is one known and located object on the table.
;; - The door of the cupboard is closed.
;; - Place the object on any shelf.

;; Case 2:
;; - The table and the cupboard have to be located.
;; - The are n (2 to 5) known and located objects on the table.
;; - The door of the cupboard is closed.
;; - Place the objects on any shelf.

;; Case 3:
;; - The table and the cupboard have to be located.
;; - There are n unknown objects on the table (perception has to be used)
;; - The door of the cupboard is closed.
;; - Place the objects on any shelf.

;; Case 4:
;; - The table and the cupboard have to be located.
;; - The cupboard has to be explored. Each shelf holds object of a category.
;; - There are n unknown objects on the table (perception has to be used). Each object belongs to a certain category.
;; - The door of the cupboard is closed.
;; - Place each order on the correct shelf according to the category.

;;; ------------------------------------------------------------------------
;;; Declaring the domain: operators, methods, and axioms
;;; ------------------------------------------------------------------------

(defdomain storegroceries
  (
    ;; store-groceries operators

    ;; To pickup an object ?a from a surface (for our domain, the surface is either a shelf of a tray)
    (:operator (!pickup ?a ?s)
            ()
            ((clear ?a) (on ?a ?s))
            ((holding ?a)))

    ;; To open the cupboard door
    (:operator (!open-door ?d)
            ((door-closed ?d))
            ((door-closed ?d))
            ((door-open ?d)))

    ;; To putdown an object on a surface (for our domain, the surface is either a shelf of a tray)
    (:operator (!putdown ?a ?s)
            ()
            ((holding ?a))
            ((on ?a ?s) (clear ?a)))

    ;; To move the robot ?r from location ?x to location ?y
    (:operator (!move ?r ?x ?y)
            ((robot-at ?r ?x))
            ((robot-at ?r ?x))
            ((robot-at ?r ?y)))

    ;; To locate an object
    (:operator (!locate ?a)
            ((unknown-location ?a))
            ((unknown-location ?a))
            ((known-location ?a)))

    ;; To perceive an object with camera ?camera
    (:operator (!perceive ?a ?camera)
                ()
                ((uncategorized ?a))
                ((categorized ?a)))

    ;; store-groceries methods

    ;; To move object ?a from the table ?t to the cupboard ?c and place it on shelf ?s
    (:method (move-known-object ?a ?t ?c ?s)
            branch1
            ((robot-at ?r ?t)(on ?a ?t)(door-open ?d))
            ((!pickup ?a ?t)(!move ?r ?t ?c)(!putdown ?a ?s))
            branch2
            ((robot-at ?r ?t)(on ?a ?t)(door-closed ?d))
            ((!move ?r ?t ?c)(!open-door ?d)(!move ?r ?c ?t)(!pickup ?a ?t)(!move ?r ?t ?c)(!putdown ?a ?s)))

    ;; To locate the table and the cupboard
    (:method (locate-table-and-cupboard ?t ?c)
            ()
            ((!locate ?t)(!locate ?c))
    )

    ;; To move objects from the table ?t to the cupboard ?c and place them on shelf ?s, using a ?tray
    (:method (move-known-objects ?t ?c ?s ?tray)
            branch1
            ((known-location ?t)(known-location ?c)(robot-at ?r ?t)(door-open ?d))
            ((load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))
            branch2
            ((known-location ?t)(known-location ?c)(robot-at ?r ?t)(door-closed ?d))
            ((!move ?r ?t ?c)(!open-door ?d)(!move ?r ?c ?t)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))
            branch3
            ((unknown-location ?t)(unknown-location ?c)(robot-at ?r ?t)(door-open ?d))
            ((locate-table-and-cupboard ?t ?c)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))
            branch4
            ((unknown-location ?t)(unknown-location ?c)(robot-at ?r ?t)(door-closed ?d))
            ((locate-table-and-cupboard ?t ?c)(!move ?r ?t ?c)(!open-door ?d)(!move ?r ?c ?t)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))

    )

    ;; To move uncategorized objects from the table ?t to the cupboard ?c and place them on shelf ?s, using a ?tray. Objects are perceived using camera ?camera
    (:method (move-uncategorized-objects ?t ?c ?s ?tray ?camera)
            branch1
            ((known-location ?t)(known-location ?c)(robot-at ?r ?t)(door-open ?d))
            ((categorize ?camera)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))
            branch2
            ((known-location ?t)(known-location ?c)(robot-at ?r ?t)(door-closed ?d))
            ((categorize ?camera)(!move ?r ?t ?c)(!open-door ?d)(!move ?r ?c ?t)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))
            branch3
            ((unknown-location ?t)(unknown-location ?c)(robot-at ?r ?t)(door-open ?d))
            ((categorize ?camera)(locate-table-and-cupboard ?t ?c)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))
            branch4
            ((unknown-location ?t)(unknown-location ?c)(robot-at ?r ?t)(door-closed ?d))
            ((locate-table-and-cupboard ?t ?c)(categorize ?camera)(!move ?r ?t ?c)(!open-door ?d)(!move ?r ?c ?t)(load-tray ?tray ?t)(!move ?r ?t ?c)(unload-tray ?tray ?s))

    )

    ;; To place objects on the tray ?tray (so that the robot can carry more than one object at a time). The objects are picked up from the table ?t
    (:method (load-tray ?tray ?t)
            branch1
            ((on ?a ?t))
            ((!pickup ?a ?t)(!putdown ?a ?tray)(load-tray ?tray ?t))
            branch2
            ((not (on ?a ?t)))
            nil  ;do nothing (we are done loading objects)
    )

    ;; To place all the object from the tray ?tray on the shelf ?s
    (:method (unload-tray ?tray ?s)
            branch1
            ((on ?a ?tray))
            ((!pickup ?a ?tray)(!putdown ?a ?s)(unload-tray ?tray ?s))
            branch2
            ((not (on ?a ?tray)))
            nil  ;do nothing (we are done unloading objects)
    )

    ;; To perceive and categorize objects
    (:method (categorize ?camera)
            branch1
            (forall (?z) ((object ?z))(categorized ?z))
            nil

            branch2
            ((object ?z)(uncategorized ?z))
            ((!perceive ?z ?camera)(categorize ?camera))

    )

    )
)
